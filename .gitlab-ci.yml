variables:
  UBUNTU_VERSION:
    value: "20.04"
    description: Version of ubuntu to test against
  RUBY_VERSION:
    value: "2.2.2"
    description: Version of ruby to test against
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}"

stages:
  - test
  - release

# -----------------------------------------------------
# Test Stage

unit-tests:
  image:
    name: git-int.cfenet.ubc.ca:5005/cfe/cfe_ubuntu/ruby:${UBUNTU_VERSION}
    pull_policy: if-not-present
  stage: test
  script:
    - cd $CI_PROJECT_DIR
    - source /etc/profile.d/rvm.sh
    - bundle install
    - rake
    - cp test/html_reports/index.html ./$(date +%Y%m%d)_${CI_PROJECT_NAME}_test_report.html
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/test/reports/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/coverage/coverage.xml
    expire_in: 1 month
    paths:
      - coverage
      - "*_${CI_PROJECT_NAME}_test_report.html"
  coverage: /\((\d+\.\d+)\%\) covered\.$/
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# -----------------------------------------------------
# Release Stage

.release-rules:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    GEMFILE_FILENAME: ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.gem

build-gem:
  image:
    name: git-int.cfenet.ubc.ca:5005/cfe/cfe_ubuntu/ruby:${UBUNTU_VERSION}
    pull_policy: if-not-present
  extends: .release-rules
  variables:
    HIVDB_ALGORITHM_VERSION: $CI_COMMIT_TAG # the gemspec will look for this in the environment
  script:
    - cd $CI_PROJECT_DIR
    - source /etc/profile.d/rvm.sh
    - bundle install
    - gem build ${CI_PROJECT_NAME}.gemspec --output build/${GEMFILE_FILENAME}
  artifacts:
    paths:
      - build/${GEMFILE_FILENAME}

upload-gem:
  image:
    name: alpine:latest
    pull_policy: if-not-present
  needs:
    - build-gem
  extends: .release-rules
  variables:
    GIT_STRATEGY: none
  script:
    - apk --no-cache add curl
    - 'curl
      --fail
      --header "JOB-TOKEN: $CI_JOB_TOKEN"
      --upload-file build/${GEMFILE_FILENAME}
      ${PACKAGE_REGISTRY_URL}/${GEMFILE_FILENAME}'

push-to-rubygems-int:
  image:
    name: git-int.cfenet.ubc.ca:5005/cfe/cfe_ubuntu/ruby:${UBUNTU_VERSION}
    pull_policy: if-not-present
  extends: .release-rules
  variables:
    GIT_STRATEGY: none
  # this keyword specifies we will get the artifacts from the stage
  needs:
    - build-gem
    - upload-gem
  before_script:
    - cd $CI_PROJECT_DIR
  script:
    - source /etc/profile.d/rvm.sh
    # We don't specify a key here because we insert the $GEM_HOST_API_KEY via gitlab secrets
    - gem push --host https://rubygems-int.bccfe.ca/private build/${GEMFILE_FILENAME}
  environment:
    name: release/${CI_COMMIT_TAG}
    on_stop: yank-gem-from-rubygems-int

yank-gem-from-rubygems-int:
  image:
    name: git-int.cfenet.ubc.ca:5005/cfe/cfe_ubuntu/ruby:${UBUNTU_VERSION}
    pull_policy: if-not-present
  extends: .release-rules
  variables:
    GIT_STRATEGY: none
  before_script:
    - cd $CI_PROJECT_DIR
  script:
    - source /etc/profile.d/rvm.sh
    # We don't specify a key here because we insert the $GEM_HOST_API_KEY via gitlab secrets
    - gem yank ${CI_PROJECT_NAME} --version ${CI_COMMIT_TAG}
  environment:
    name: release/${CI_COMMIT_TAG}
    action: stop
  when: manual
